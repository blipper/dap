/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ImpressionBlindAuction {
  export type PublisherStruct = { publisher: string; floorPrice: BigNumberish };

  export type PublisherStructOutput = [string, BigNumber] & {
    publisher: string;
    floorPrice: BigNumber;
  };

  export type BidStruct = { blindedBid: BytesLike; deposit: BigNumberish };

  export type BidStructOutput = [string, BigNumber] & {
    blindedBid: string;
    deposit: BigNumber;
  };

  export type ViewerStruct = {
    viewer: string;
    ask: BigNumberish;
    publisherSecret: BigNumberish;
  };

  export type ViewerStructOutput = [string, BigNumber, BigNumber] & {
    viewer: string;
    ask: BigNumber;
    publisherSecret: BigNumber;
  };
}

export interface ImpressionBlindAuctionInterface extends utils.Interface {
  functions: {
    "auctionEnd()": FunctionFragment;
    "bid(bytes32)": FunctionFragment;
    "bids(address,uint256)": FunctionFragment;
    "endBidsCollection(uint256)": FunctionFragment;
    "estimatedBiddingPeriod_ms()": FunctionFragment;
    "highestBid()": FunctionFragment;
    "highestBidder()": FunctionFragment;
    "publisher()": FunctionFragment;
    "reveal(uint256[],bool[],bytes32[])": FunctionFragment;
    "supplyViewer((address,uint256,uint256))": FunctionFragment;
    "viewer()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionEnd"
      | "bid"
      | "bids"
      | "endBidsCollection"
      | "estimatedBiddingPeriod_ms"
      | "highestBid"
      | "highestBidder"
      | "publisher"
      | "reveal"
      | "supplyViewer"
      | "viewer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endBidsCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedBiddingPeriod_ms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "publisher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [BigNumberish[], boolean[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyViewer",
    values: [ImpressionBlindAuction.ViewerStruct]
  ): string;
  encodeFunctionData(functionFragment: "viewer", values?: undefined): string;

  decodeFunctionResult(functionFragment: "auctionEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endBidsCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedBiddingPeriod_ms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "publisher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyViewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewer", data: BytesLike): Result;

  events: {
    "AuctionEnded(address,uint256)": EventFragment;
    "BidScan(tuple)": EventFragment;
    "InvalidReveal(bytes32,bytes32)": EventFragment;
    "NewHighestBid(address,uint256)": EventFragment;
    "NotAllBidsRevealed(uint256)": EventFragment;
    "OverbidRefund(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidScan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidReveal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewHighestBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotAllBidsRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OverbidRefund"): EventFragment;
}

export interface AuctionEndedEventObject {
  winner: string;
  highestBid: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [string, BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface BidScanEventObject {
  bid: ImpressionBlindAuction.BidStructOutput;
}
export type BidScanEvent = TypedEvent<
  [ImpressionBlindAuction.BidStructOutput],
  BidScanEventObject
>;

export type BidScanEventFilter = TypedEventFilter<BidScanEvent>;

export interface InvalidRevealEventObject {
  blindedBid: string;
  calculatedBid: string;
}
export type InvalidRevealEvent = TypedEvent<
  [string, string],
  InvalidRevealEventObject
>;

export type InvalidRevealEventFilter = TypedEventFilter<InvalidRevealEvent>;

export interface NewHighestBidEventObject {
  bidder: string;
  bid: BigNumber;
}
export type NewHighestBidEvent = TypedEvent<
  [string, BigNumber],
  NewHighestBidEventObject
>;

export type NewHighestBidEventFilter = TypedEventFilter<NewHighestBidEvent>;

export interface NotAllBidsRevealedEventObject {
  bidCount: BigNumber;
}
export type NotAllBidsRevealedEvent = TypedEvent<
  [BigNumber],
  NotAllBidsRevealedEventObject
>;

export type NotAllBidsRevealedEventFilter =
  TypedEventFilter<NotAllBidsRevealedEvent>;

export interface OverbidRefundEventObject {
  bidder: string;
  amount: BigNumber;
}
export type OverbidRefundEvent = TypedEvent<
  [string, BigNumber],
  OverbidRefundEventObject
>;

export type OverbidRefundEventFilter = TypedEventFilter<OverbidRefundEvent>;

export interface ImpressionBlindAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImpressionBlindAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bid(
      blindedBid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bids(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { blindedBid: string; deposit: BigNumber }
    >;

    endBidsCollection(
      publisherSecret: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimatedBiddingPeriod_ms(overrides?: CallOverrides): Promise<[BigNumber]>;

    highestBid(overrides?: CallOverrides): Promise<[BigNumber]>;

    highestBidder(overrides?: CallOverrides): Promise<[string]>;

    publisher(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { publisher: string; floorPrice: BigNumber }
    >;

    reveal(
      values: BigNumberish[],
      fakes: boolean[],
      secrets: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyViewer(
      _viewer: ImpressionBlindAuction.ViewerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewer(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        viewer: string;
        ask: BigNumber;
        publisherSecret: BigNumber;
      }
    >;
  };

  auctionEnd(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bid(
    blindedBid: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bids(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { blindedBid: string; deposit: BigNumber }>;

  endBidsCollection(
    publisherSecret: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimatedBiddingPeriod_ms(overrides?: CallOverrides): Promise<BigNumber>;

  highestBid(overrides?: CallOverrides): Promise<BigNumber>;

  highestBidder(overrides?: CallOverrides): Promise<string>;

  publisher(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { publisher: string; floorPrice: BigNumber }
  >;

  reveal(
    values: BigNumberish[],
    fakes: boolean[],
    secrets: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyViewer(
    _viewer: ImpressionBlindAuction.ViewerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewer(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      viewer: string;
      ask: BigNumber;
      publisherSecret: BigNumber;
    }
  >;

  callStatic: {
    auctionEnd(overrides?: CallOverrides): Promise<void>;

    bid(blindedBid: BytesLike, overrides?: CallOverrides): Promise<void>;

    bids(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { blindedBid: string; deposit: BigNumber }
    >;

    endBidsCollection(
      publisherSecret: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    estimatedBiddingPeriod_ms(overrides?: CallOverrides): Promise<BigNumber>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidder(overrides?: CallOverrides): Promise<string>;

    publisher(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { publisher: string; floorPrice: BigNumber }
    >;

    reveal(
      values: BigNumberish[],
      fakes: boolean[],
      secrets: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    supplyViewer(
      _viewer: ImpressionBlindAuction.ViewerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    viewer(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        viewer: string;
        ask: BigNumber;
        publisherSecret: BigNumber;
      }
    >;
  };

  filters: {
    "AuctionEnded(address,uint256)"(
      winner?: null,
      highestBid?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(winner?: null, highestBid?: null): AuctionEndedEventFilter;

    "BidScan(tuple)"(bid?: null): BidScanEventFilter;
    BidScan(bid?: null): BidScanEventFilter;

    "InvalidReveal(bytes32,bytes32)"(
      blindedBid?: null,
      calculatedBid?: null
    ): InvalidRevealEventFilter;
    InvalidReveal(
      blindedBid?: null,
      calculatedBid?: null
    ): InvalidRevealEventFilter;

    "NewHighestBid(address,uint256)"(
      bidder?: null,
      bid?: null
    ): NewHighestBidEventFilter;
    NewHighestBid(bidder?: null, bid?: null): NewHighestBidEventFilter;

    "NotAllBidsRevealed(uint256)"(
      bidCount?: null
    ): NotAllBidsRevealedEventFilter;
    NotAllBidsRevealed(bidCount?: null): NotAllBidsRevealedEventFilter;

    "OverbidRefund(address,uint256)"(
      bidder?: null,
      amount?: null
    ): OverbidRefundEventFilter;
    OverbidRefund(bidder?: null, amount?: null): OverbidRefundEventFilter;
  };

  estimateGas: {
    auctionEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bid(
      blindedBid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bids(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endBidsCollection(
      publisherSecret: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimatedBiddingPeriod_ms(overrides?: CallOverrides): Promise<BigNumber>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidder(overrides?: CallOverrides): Promise<BigNumber>;

    publisher(overrides?: CallOverrides): Promise<BigNumber>;

    reveal(
      values: BigNumberish[],
      fakes: boolean[],
      secrets: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyViewer(
      _viewer: ImpressionBlindAuction.ViewerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bid(
      blindedBid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endBidsCollection(
      publisherSecret: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimatedBiddingPeriod_ms(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highestBidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publisher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reveal(
      values: BigNumberish[],
      fakes: boolean[],
      secrets: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyViewer(
      _viewer: ImpressionBlindAuction.ViewerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
